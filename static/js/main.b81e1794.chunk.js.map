{"version":3,"sources":["Components/Card.jsx","Components/CardList.jsx","Components/Search.jsx","Components/Scroll.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","robot","className","src","id","alt","name","username","email","CardList","robots","map","i","key","Search","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","e","setState","searchField","target","value","state","fetch","then","response","json","user","filterSearch","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6NAiBeA,G,MAfF,SAACC,GACV,OAEI,yBAAKC,UAAU,8DACX,yBAAKA,UAAU,qBAAqBC,IAAG,+BAA0BF,EAAMG,IAAMC,IAAI,SACjF,yBAAKH,UAAU,aACX,wBAAIA,UAAU,cAAcD,EAAMK,MAClC,wBAAIJ,UAAU,cAAd,aAAsCD,EAAMM,UAC5C,uBAAGL,UAAU,aAAaD,EAAMO,WCIjCC,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,yBAAKR,UAAU,OACVQ,EAAOC,KAAI,SAACV,EAAOW,GAEhB,OAAO,kBAAC,EAAD,CAAMC,IAAKZ,EAAMG,GAAIA,GAAMH,EAAMG,GAAIE,KAAML,EAAMK,KAAMC,SAAUN,EAAMM,SAAUC,MAAOP,EAAMO,MAAOI,EAAKA,SCQlHE,EAdA,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACb,OACA,yBAAKb,UAAU,sBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,oBAAf,MAEF,2BAAOc,KAAK,OAAOd,UAAU,eAAeE,GAAG,uBAAuBa,YAAY,SAASC,SAAUH,OCC9FI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UAC9DJ,EAAMK,WC4CJC,E,YAxCb,aAAe,IAAD,8BACZ,+CAMDC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SANtC,EAAKC,MAAQ,CACXvB,OAAQ,GACRoB,YAAa,IAJH,E,iFAWO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAI,OAAE,EAAKT,SAAS,CAACnB,OAAO4B,S,+BAG3D,IAAD,OACDC,EAAcC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAxC,GAC3C,OAAOA,EAAMK,KAAKoC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAGlE,OAAgC,IAA7BF,KAAKP,MAAMvB,OAAOkC,OACZ,wBAAI1C,UAAU,eAAd,WAGT,yBAAKA,UAAU,QACb,gCACE,uBAAGA,UAAU,yBAAb,eACA,kBAAC,EAAD,CAAQa,aAAcyB,KAAKb,kBAE7B,yBAAKzB,UAAU,aACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUQ,OAAU6B,W,GAjCZM,a,MCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b81e1794.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (robot) => {\r\n    return (\r\n        \r\n        <div className=\"col-lg-4 col-md-6 mb-2 card bg-info text-white text-center\">\r\n            <img className=\"card-img-top w-100\" src={`https://robohash.org/${robot.id}`} alt=\"Card\"/>\r\n            <div className=\"card-body\">\r\n                <h3 className=\"card-title\">{robot.name}</h3>\r\n                <h6 className=\"card-title\">Nickname: {robot.username}</h6>\r\n                <p className=\"card-text\">{robot.email}</p>\r\n            </div>\r\n            </div>\r\n    \r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from \"./Card\"\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <div className=\"row\">\r\n            {robots.map((robot, i)=>{\r\n                \r\n                return <Card key={robot.id} id = {robot.id} name={robot.name} username={robot.username} email={robot.email} i = {i} />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Search = ({searchchange}) => {\r\n    return (\r\n    <div className=\"col-3 mx-auto my-3\">\r\n      <div className=\"input-group mb-2\">\r\n        <div className=\"input-group-prepend\">\r\n          <div className=\"input-group-text\">@</div>\r\n        </div>\r\n        <input type=\"text\" className=\"form-control\" id=\"inlineFormInputGroup\" placeholder=\"Search\" onChange={searchchange} />\r\n      </div>\r\n    </div>\r\n    \r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: \"scroll\", border:\"1px solid black\", height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport CardList from \"./Components/CardList\"\nimport Search from \"./Components/Search\"\nimport Scroll from \"./Components/Scroll\"\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\"\n    };\n  }\n   onSearchChange = e=> {\n     this.setState({searchField: e.target.value})\n   }\n\n   componentDidMount(){\n     fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response=>response.json()).then(user=>this.setState({robots:user}))\n   }\n\n  render() { \n    const filterSearch= this.state.robots.filter(robot=>{\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n    })\n\n    if(this.state.robots.length === 0){\n      return <h1 className='text-center'>Loading</h1>\n    }\n    return ( \n    <div className=\"main\">\n      <header>\n        <p className=\"display-4 text-center\">Robofriends</p>\n        <Search searchchange={this.onSearchChange} />\n      </header>\n      <div className=\"container\">\n        <Scroll>\n          <CardList robots = {filterSearch}/>\n        </Scroll>\n      </div>\n      \n    </div> );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}